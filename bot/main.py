import telebot
from telebot import types

import os
from dotenv import load_dotenv

from model import Preprocessor, DataGenerator, Model
from survey import SurveyClass
from task_survey import TaskSurvey
from task_manager import TaskManager


load_dotenv('.env')
TOKEN = os.getenv("TOKEN")

bot = telebot.TeleBot(TOKEN)


from_task = None  # Indicator if question came from survey or after creating new task
current_language = None  # Language interface
task_answers = None  # User's answers after creating task

data = None  # Object for preprocessing survey answers
ml = None # Model
result = None  # Model's prediction
weights = None  # Weights from model


# BOT FUNCTION - Start function with language choosing
@bot.message_handler(commands=['start'])
def start(message):
    global current_language
    markup = types.ReplyKeyboardMarkup(row_width=2)
    btn1 = types.KeyboardButton("üá∑üá∫ Russian")
    btn2 = types.KeyboardButton("üá¨üáß English")
    markup.add(btn1, btn2)
    bot.send_message(message.from_user.id, "Choose the language", reply_markup=markup)


# FUNCTION - Main Keyboard markup
def create_markup(language):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if language == 'Russian':
        btn1 = types.KeyboardButton('üÜï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞')
        btn2 = types.KeyboardButton('üìÑ –ú–æ–∏ –∑–∞–¥–∞—á–∏')
        btn3 = types.KeyboardButton('üìñ–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á—É')
        btn4 = types.KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É')
        btn5 = types.KeyboardButton('üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞')
        btn6 = types.KeyboardButton('‚ùì –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å')
        btn7 = types.KeyboardButton("üëÄ –û –±–æ—Ç–µ")
        markup.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7)
    elif language == 'English':
        btn1 = types.KeyboardButton('üÜï New task')
        btn2 = types.KeyboardButton('üìÑ My tasks')
        btn3 = types.KeyboardButton('üìñ Task info')
        btn4 = types.KeyboardButton('‚ùå Delete task')
        btn5 = types.KeyboardButton('üìä Analytics')
        btn6 = types.KeyboardButton('‚ùì Take a survey')
        btn7 = types.KeyboardButton("üëÄ About bot")
        markup.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7)
    return markup


# BOT FUNCTION - bot info
@bot.message_handler(commands=['info'])
def info(message):
    global current_language
    if current_language == 'Russian':
        bot.send_message(message.from_user.id,
                         "ProTracker –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É. –ò—Å–ø–æ–ª—å–∑—É—è –º–∞—à–∏–Ω–Ω–æ–µ "
                         "–æ–±—É—á–µ–Ω–∏–µ, "
                         "—ç—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–º–µ–Ω—è–µ—Ç –ª–∏–Ω–µ–π–Ω—É—é —Ä–µ–≥—Ä–µ—Å—Å–∏—é –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ "
                         "–≤–Ω–∏–º–∞–Ω–∏–µ, "
                         "—á—Ç–æ –∫–∞–∫ MVP - —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–∞–≥–∏ –∏ –±—É–¥–µ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å—Å—è. "
                         "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ "
                         "ProTracker –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏!\n\nüåê "
                         "GitHub: "
                         "https://github.com/frenchiesko/protracker-bot",
                         reply_markup=create_markup(current_language))

    elif current_language == 'English':
        bot.send_message(message.from_user.id,
                         "ProTracker enables effective task management and analytics. Leveraging machine learning, "
                         "this bot employs linear regression to predict task durations.\nPlease note, as an MVP, "
                         "this project may have bugs and will be improving. \nJoin ProTracker to streamline "
                         "your task management and gain insightful analytics!\n\nüåê GitHub: https://github.com/frenchiesko/protracker-bot",
                         reply_markup=create_markup(current_language))


# FUNCTION - add answers to dict for saving in storage
def process_survey_answer(message, dct, question_number, answer):
    if question_number not in dct:
        dct[question_number] = str(answer)


# FUNCTION - answer data processing
def send_messages(message, lst, dct, index):
    global current_language, from_task, ml, result, weights, data
    if index < len(lst):
        lst[index](message, current_language)
        bot.register_next_step_handler(message, lambda msg: process_survey_answer(message, dct, index, msg.text))
        index += 1
        bot.register_next_step_handler(message, lambda msg: send_messages(msg, lst, dct, index))
    else:

        # If survey data
        if not from_task:
            data = Preprocessor(dct).preprocess_survey_data(message, current_language)
            if data is not None:
                weights = DataGenerator(data).get_weights()
                if weights is not None:
                    # If all answer types are correct
                    if current_language == 'English':
                        bot.send_message(message.from_user.id, "üì¨ Information successfully sent! Ready for "
                                                               "predictions! Click on /new_task to create a new task")
                    elif current_language == 'Russian':
                        bot.send_message(message.from_user.id, "üì¨ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞! –ì–æ—Ç–æ–≤–æ –∫ "
                                                               "–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /new_task, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å "
                                                               "–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É")
                    # Model training
                    new_data = weights.generate_data()
                    ml = Model(new_data).training()
                else:
                    if current_language == 'English':
                        bot.send_message(message.from_user.id,
                                         "üö´ Wrong answers format. Take a /survey again")
                    elif current_language == 'Russian':
                        bot.send_message(message.from_user.id,
                                         "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞ - /survey")
            else:
                if current_language == 'English':
                    bot.send_message(message.from_user.id,
                                     "üö´ Wrong answers format. Take a /survey again")
                elif current_language == 'Russian':
                    bot.send_message(message.from_user.id,
                                     "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞ - /survey")

        # If task data
        else:
            if weights is not None:
                data = Preprocessor(dct).preprocess_task_data(message, current_language)
                if data is not None:
                    if current_language == 'English':
                        bot.send_message(message.from_user.id,
                                         "‚úÖ Task successfully saved!")
                    else:
                        bot.send_message(message.from_user.id,
                                         "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫!")
                    # ML model's prediction
                    result = Model(data).make_prediction(ml)
                    tm.add_prediction(result)
                else:
                    # If answers format is incorrect
                    if current_language == 'English':
                        bot.send_message(message.from_user.id,
                                         "üö´ Wrong answers format. Try to create /new_task again")
                    elif current_language == 'Russian':
                        bot.send_message(message.from_user.id,
                                         "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É —Å–Ω–æ–≤–∞\n/new_task")
            else:
                # If user creates task before taking a survey (for the 1st time)
                if current_language == 'English':
                    bot.send_message(message.from_user.id,
                                     "‚úÖ Task successfully saved! Prediction is not available, I'd recommend you to "
                                     "/delete_task")
                    bot.send_message(message.from_user.id,
                                     "üôÅ It seems I don't have survey data. Please retake the /survey. "
                                     "Without it, I won't be able to make predictions")
                elif current_language == 'Russian':
                    bot.send_message(message.from_user.id,
                                     "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫! –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É—é "
                                     "—É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ /delete_task")
                    bot.send_message(message.from_user.id,
                                     "üôÅ –ü–æ—Ö–æ–∂–µ, —É –º–µ–Ω—è –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–∞. –ü—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ. –ë–µ–∑ –Ω–µ–≥–æ "
                                     "–º–Ω–µ –Ω–µ —É–¥–∞—Å—Ç—Å—è –≤—ã—á–∏—Å–ª–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.\n/survey")


# Objects
tm = TaskManager()
sc = SurveyClass()
ts = TaskSurvey()

# Survey questions list from SurveyClass
sc_list = [sc.start_survey, sc.question_one_hard, sc.question_two,
           sc.question_two_hard, sc.question_three, sc.question_three_hard,
           sc.question_four, sc.question_four_hard, sc.question_five,
           sc.question_five_hard, sc.question_six, sc.question_six_hard,
           sc.question_seven, sc.question_seven_hard]

# New task questions list from TaskSurvey
at_list = [ts.start_new_task, ts.question_two, ts.question_three, ts.question_four,
           ts.question_five, ts.question_six, ts.question_seven, ts.question_eight]


# BOT FUNCTION - Start a survey
@bot.message_handler(commands=['survey'])
def survey(message):
    global from_task
    new_user_answers = {}
    from_task = False
    send_messages(message, sc_list, new_user_answers, 0)


# BOT FUNCTION - Create new task
@bot.message_handler(commands=['new_task'])
def new_task(message):
    global current_language, from_task
    new_user_answers = {}
    if current_language == 'Russian':
        bot.send_message(message.from_user.id,
                         "üëç –û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –≤–∞—à—É –∑–∞–¥–∞—á—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ "
                         "–≤–æ–ø—Ä–æ—Å–æ–≤."
                         "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —è—Å–Ω–æ –æ–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á—É, –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏, "
                         "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –¥–ª—è "
                         "–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π—Ç–µ —á–µ—Å—Ç–Ω–æ –∏ –≤ —Ç–æ–º –≤–∏–¥–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤–∞—Å –ø—Ä–æ—Å—è—Ç.\n\n"
                         "üéØ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –º–æ–≥—É—Ç –æ–∫–∞–∑–∞—Ç—å –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ "
                         "–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.",
                         reply_markup=create_markup(current_language))

        from_task = True
        send_messages(message, at_list, new_user_answers, 0)
        tm.create_task(new_user_answers)
        task_answers = new_user_answers
    elif current_language == 'English':
        bot.send_message(message.from_user.id,
                         "üëç Great! To store your task, please answer a few questions. This will help provide a clear "
                         "description, "
                         "especially for predicting the time needed to complete it. Please answer truthfully and as "
                         "requested.\n\n"
                         "üéØ Note that inaccurate responses may adversely affect model's predictions.",
                         reply_markup=create_markup(current_language))

        from_task = True
        send_messages(message, at_list, new_user_answers, 0)
        tm.create_task(new_user_answers)
        task_answers = new_user_answers


# BOT FUNCTION - Show user's task list
@bot.message_handler(commands=['my_tasks'])
def my_tasks(message):
    global current_language
    tm.show_tasks(message, current_language)


# BOT FUNCTION - task info
@bot.message_handler(commands=['task_info'])
def task_info(message):
    global current_language
    if current_language == 'English':
        bot.send_message(message.from_user.id, "Enter task number")
    elif current_language == 'Russian':
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏")
    bot.register_next_step_handler(message, process_task_info_request)


# FUNCTION - get information about task
def process_task_info_request(message):
    global current_language
    number = message.text.strip()
    get_info = tm.get_task_info(message, int(number), current_language)
    if not isinstance(get_info, bool) and get_info is not None:
        if current_language == 'English':
            inf = (f"üìå Task: {get_info['title']}\n\n"
                   f"üìÑ Description:\n{get_info['description']}\n\n"
                   f"üîó Materials and resources:\n{get_info['resources']}\n\n"
                   f"üèÖ Task priority: {get_info['priority']}\n"
                   f"üìà Difficulty level: {get_info['diff_level']}\n"
                   f"Start date: {get_info['start']}\n"
                   f"‚è± Time needed: ~{get_info['prediction']} hrs")
        elif current_language == 'Russian':
            inf = (f"üìå –ó–∞–¥–∞—á–∞: {get_info['title']}\n\n"
                   f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:\n{get_info['description']}\n\n"
                   f"üîó –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Ä–µ—Å—É—Ä—Å—ã:\n{get_info['resources']}\n\n"
                   f"üèÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏: {get_info['priority']}\n"
                   f"üìà –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {get_info['diff_level']}\n\n"
                   f"üìÜ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {get_info['start']}\n"
                   f"‚è± –ß–∞—Å–æ–≤ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ~{get_info['prediction']}")

        if task_info:
            bot.send_message(message.from_user.id, inf)
        else:
            if current_language == 'English':
                bot.send_message(message.from_user.id,
                                 "‚úñÔ∏è No task with this number was found. Please enter the correct task number")
            elif current_language == 'Russian':
                bot.send_message(message.from_user.id,
                                 "‚úñÔ∏è –ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
    else:
        if current_language == 'English':
            bot.send_message(message.from_user.id,
                             "‚úñÔ∏è No task with this number was found. Please enter the correct task number")
        elif current_language == 'Russian':
            bot.send_message(message.from_user.id,
                             "‚úñÔ∏è –ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")



# FUNCTION - perform deleting task
def process_delete_task(message):
    global current_language
    number = message.text.strip()
    if current_language == 'English':
        dl = tm.delete_task(message, number, current_language)
        if isinstance(dl, bool):
            bot.send_message(message.from_user.id, "Task successfully deleted!")
    elif current_language == 'Russian':
        dl = tm.delete_task(message, number, current_language)
        if isinstance(dl, bool):
            bot.send_message(message.from_user.id, "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")


# BOT FUNCTION - Delete task from storage
@bot.message_handler(commands=['delete_task'])
def delete_task(message):
    global current_language
    if current_language == 'English':
        bot.send_message(message.from_user.id, "Enter task number (1-10)")
    elif current_language == 'Russian':
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ (1-10)")
    bot.register_next_step_handler(message, process_delete_task)


# BOT FUNCTION - show descriptive statisics about tasks
@bot.message_handler(commands=['analytics'])
def analytics(message):
    global current_language
    tm.task_data(message, current_language)


# BOT FUNCTION - Text message handler
@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    global current_language, user_answers
    user_id = message.from_user.id

    if message.text == 'üá∑üá∫ Russian':
        current_language = 'Russian'
        markup = create_markup(current_language)
        bot.send_message(message.from_user.id,
                         "üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –º–Ω–µ –ø–æ–Ω—è—Ç—å "
                         "—Ç–≤–æ–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞–±–æ—Ç—ã –∏ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è "
                         "–ø–æ —Ç–≤–æ–∏–º –∑–∞–¥–∞—á–∞–º."
                         "\n–ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /survey, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å.\n\n üéØ –û–±—Ä–∞—Ç–∏ "
                         "–≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –º–æ–≥—É—Ç –æ–∫–∞–∑–∞—Ç—å –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ "
                         "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ.\n"
                         "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å - —è –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å!", reply_markup=markup)
    elif message.text == 'üá¨üáß English':
        current_language = 'English'
        markup = create_markup(current_language)
        bot.send_message(message.from_user.id,
                         "üëã Hi! To start off, I recommend taking a survey. It'll help me understand your previous "
                         "work patterns and make accurate predictions for your tasks."
                         "\nJust use the command /survey to begin the survey.\n\n üéØ Please note that incorrect answers "
                         "may"
                         "have a negative impact on the machine learning"
                         "model's predictions.\nI'm here to assist if you need any help!",
                         reply_markup=markup)


    # Buttons interaction
    elif message.text == '‚ùì –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å' or message.text == '‚ùì Take a survey':
        survey(message)
    elif message.text == 'üëÄ –û –±–æ—Ç–µ' or message.text == 'üëÄ About bot':
        info(message)
    elif message.text == 'üÜï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞' or message.text == 'üÜï New task':
        new_task(message)
    elif message.text == 'üìÑ –ú–æ–∏ –∑–∞–¥–∞—á–∏' or message.text == 'üìÑ My tasks':
        my_tasks(message)
    elif message.text == '‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É' or message.text == '‚ùå Delete task':
        delete_task(message)
    elif message.text == 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞' or message.text == 'üìä Analytics':
        analytics(message)
    elif message.text == 'üìñ–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á—É' or message.text == 'üìñ Task info':
        task_info(message)
    else:
        handle_unknown_message(message)


# BOT FUNCTION - for unknown text
@bot.message_handler(func=lambda message: True)
def handle_unknown_message(message):
    global current_language
    response = {
        'English': "I'm sorry, I didn't understand that. Here are the available commands:\n"
                   "‚ùì /survey - start a survey\n"
                   "üëÄ /info - learn about the bot\n"
                   "üÜï /new_task - create a new task\n"
                   "üìÑ /my_tasks - view my tasks\n"
                   "‚ùå /delete_task - delete a task\n"
                   "üìä /analytics - view analytics\n"
                   "üìñ /task_info - view task information",
        'Russian': "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
                   "‚ùì /survey - –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å\n"
                   "üëÄ /info - —É–∑–Ω–∞—Ç—å –æ –±–æ—Ç–µ\n"
                   "üÜï /new_task - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n"
                   "üìÑ /my_tasks - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–¥–∞—á–∏\n"
                   "‚ùå /delete_task - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n"
                   "üìä /analytics - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É\n"
                   "üìñ /task_info - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ"
    }
    bot.reply_to(message, response[current_language])


if __name__ == "__main__":
    bot.polling(none_stop=True, interval=0)
