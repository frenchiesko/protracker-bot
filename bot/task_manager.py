import telebot
from telebot import types

import io
import os
from dotenv import load_dotenv

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


load_dotenv('.env')
TOKEN = os.getenv("TOKEN")

bot = telebot.TeleBot(TOKEN)


# FUNCTION - Main Keyboard markup
def create_markup(language):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if language == 'Russian':
        btn1 = types.KeyboardButton('üÜï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞')
        btn2 = types.KeyboardButton('üìÑ –ú–æ–∏ –∑–∞–¥–∞—á–∏')
        btn3 = types.KeyboardButton('üìñ–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á—É')
        btn4 = types.KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É')
        btn5 = types.KeyboardButton('üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞')
        btn6 = types.KeyboardButton('‚ùì –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å')
        btn7 = types.KeyboardButton("üëÄ –û –±–æ—Ç–µ")
        markup.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7)
    elif language == 'English':
        btn1 = types.KeyboardButton('üÜï New task')
        btn2 = types.KeyboardButton('üìÑ My tasks')
        btn3 = types.KeyboardButton('üìñ Task info')
        btn4 = types.KeyboardButton('‚ùå Delete task')
        btn5 = types.KeyboardButton('üìä Analytics')
        btn6 = types.KeyboardButton('‚ùì Take a survey')
        btn7 = types.KeyboardButton("üëÄ About bot")
        markup.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7)
    return markup


# TASK CLASS - class for interaction with tasks
class TaskManager:

    def __init__(self):
        self.storage = []
        self.preds = []

    def create_task(self, task):
        self.storage.append(task)

    def add_prediction(self, pred):
        self.preds.append(pred)

    def show_tasks(self, message, lang):
        if lang == 'English':
            if len(self.storage) == 0:
                bot.send_message(message.from_user.id,
                                 "You have no tasks right now. Click /new_task to create new one!")
            else:
                bot.send_message(message.from_user.id,
                                 "üìù Your Task list")
        elif lang == 'Russian':
            if len(self.storage) == 0:
                bot.send_message(message.from_user.id,
                                 "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /new_task, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é!")
            else:
                bot.send_message(message.from_user.id,
                                 "üìù –í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
        task_list = ""
        counter = 1
        for task in self.storage:
            task_list += f'{counter}. {task[2]}\n'
            counter += 1
        bot.send_message(message.from_user.id, task_list)

    # FUNCTION - Make graphs about task categories (simple analytics)
    def task_data(self, message, lang):
        if 3 > len(self.storage):
            if lang == 'English':
                bot.send_message(message.from_user.id,
                                 "üìä You need at least three tasks to generate analytics. Surprise me with a longer "
                                 "task list for more precise analysis! üìà"
                                 "\nClick /new_task to create new one.")
                return False
            elif lang == 'Russian':
                bot.send_message(message.from_user.id,
                                 "üìä –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º —Ç—Ä–∏ –∑–∞–¥–∞—á–∏. "
                                 "–û–±—Ä–∞–¥—É–π—Ç–µ –º–µ–Ω—è –±–æ–ª—å—à–∏–º —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞! üìà!"
                                 "\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /new_task, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.")
                return False
        elif 3 <= len(self.storage):
            if lang == 'English':
                bot.send_message(message.from_user.id, "üîé Here's your personalized analysis of the graphs!")

                priority = [task[5] for task in self.storage]
                when_start = [task[6] for task in self.storage]
                independent = [task[7] for task in self.storage]
                diff_lvl = [task[8] for task in self.storage]
            elif lang == 'Russian':
                bot.send_message(message.from_user.id, "üîé –í–æ—Ç –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤!")

                priority = [task[5] for task in self.storage if task[5]]
                when_start = [task[6] for task in self.storage if task[6]]
                independent = [task[7] for task in self.storage if task[7]]
                diff_lvl = [task[8] for task in self.storage if task[8]]

            data = pd.DataFrame({'priority': priority, 'when_start': when_start,
                                 'is_independently': independent, 'difficulty_lvl': diff_lvl})

            data['priority'] = data['priority'].apply(lambda x: x[2:])
            data['when_start'] = data['when_start'].apply(lambda x: x[2:])
            plots = []
            # Check count of categories
            if 1 <= len(data['priority'].unique()) <= 3:
                # Plot 1 - Pie chart for priority
                fig1, ax1 = plt.subplots(figsize=(7, 7))
                priority_cat = list(data["priority"].value_counts().index)
                sizes = list(data["priority"].value_counts())
                ax1.pie(sizes, labels=priority_cat, autopct="%1.1f%%")
                ax1.set_title("Priority" if lang == 'English' else '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á')
                plots.append(fig1)

            if 1 <= len(data['when_start'].unique()) <= 3:
                # Plot 2 - Pie chart for start time
                fig2, ax2 = plt.subplots(figsize=(7, 7))
                start_cat = list(data["when_start"].value_counts().index)
                sizes = list(data["when_start"].value_counts())
                ax2.pie(sizes, labels=start_cat, autopct="%1.1f%%")
                ax2.set_title("When to Start" if lang == 'English' else '–ö–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞—Ç—å –∑–∞–¥–∞—á—É')
                plots.append(fig2)

            if 1 <= len(data['is_independently'].unique()) <= 2:
                # Plot 3 - Countplot for independence
                fig3, ax3 = plt.subplots(figsize=(7, 5))
                sns.countplot(data=data, x='is_independently', ax=ax3)
                ax3.set_xlabel("Independently" if lang == 'English' else "–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ")
                ax3.set_title("Independence" if lang == 'English' else '–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á')
                plots.append(fig3)

                for plot in plots:
                    # Adding language-dependent supertitle
                    if lang == 'English':
                        plot.suptitle("Task Categories", fontsize=16, y=1.5)
                    elif lang == 'Russian':
                        plot.suptitle("–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –∑–∞–¥–∞—á–∞–º", fontsize=16, y=1.5)

                    # Save each plot in a buffer and send separately
                    img_buffer = io.BytesIO()
                    plot.savefig(img_buffer, format='png')
                    img_buffer.seek(0)
                    bot.send_photo(message.from_user.id, photo=img_buffer)

            else:
                if lang == 'English':
                    bot.send_message(message.from_user.id,
                                     "It seems that you tasks format is incorrect. Unfortunately, I can't send you "
                                     "task analytics. /task_info")
                elif lang == 'Russian':
                    bot.send_message(message.from_user.id, "–ü–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á. –° –Ω–∏–º–∏ —è –Ω–µ —Å–º–æ–≥—É "
                                                           "–≤—ã–≤–µ—Å—Ç–∏ –≤–∞–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É. /task_info")

    def get_task_info(self, message, number, lang):
        if len(self.storage) == 0:
            if lang == 'English':
                bot.send_message(message.from_user.id, "You have no tasks right now. Click /new_task to create new one")
                return False
            elif lang == 'Russian':
                bot.send_message(message.from_user.id,
                                 "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /new_task, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é!")
                return False

        elif 1 <= number <= len(self.storage):
            task = self.storage[number - 1]
            result = {
                'start': task[1],
                'title': task[2],
                'description': task[3],
                'resources': task[4],
                'priority': task[5],
                'when_to_start': task[6],
                'independently': task[7],
                'diff_level': task[8]
            }
            if len(self.preds) >= number:
                result['prediction'] = self.preds[number - 1]
            else:
                result['prediction'] = '?'
            return result
        else:
            return None

    def delete_task(self, message, number, lang):
        if lang == 'English':
            if len(self.storage) == 0:
                bot.send_message(message.from_user.id, "You have no tasks right now. Click /new_task to create new one")
            else:
                task = self.storage[int(number) - 1]
                self.storage.remove(task)
                return True
        elif lang == 'Russian':
            if len(self.storage) == 0:
                bot.send_message(message.from_user.id,
                                 "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /new_task, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é!")
            else:
                task = self.storage[int(number) - 1]
                self.storage.remove(task)
                return True
